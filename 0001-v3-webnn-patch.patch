From 5d1416f90d6e0a67dc84757bc6fe9754a86946d7 Mon Sep 17 00:00:00 2001
From: Belem Zhang <belem.zhang@intel.com>
Date: Mon, 25 Nov 2024 09:10:33 +0800
Subject: [PATCH] v3-webnn-patch

---
 package-lock.json | 16 +++++++--------
 package.json      |  2 +-
 src/models.js     | 50 ++++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 58 insertions(+), 10 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 17b45d5..3d4c61c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -11,7 +11,7 @@
       "dependencies": {
         "@huggingface/jinja": "^0.3.0",
         "onnxruntime-node": "1.19.2",
-        "onnxruntime-web": "1.20.0-dev.20241016-2b8fc5529b",
+        "onnxruntime-web": "1.21.0-dev.20241122-a2ba3cb547",
         "sharp": "^0.33.5"
       },
       "devDependencies": {
@@ -6088,22 +6088,22 @@
       }
     },
     "node_modules/onnxruntime-web": {
-      "version": "1.20.0-dev.20241016-2b8fc5529b",
-      "resolved": "https://registry.npmjs.org/onnxruntime-web/-/onnxruntime-web-1.20.0-dev.20241016-2b8fc5529b.tgz",
-      "integrity": "sha512-1XovqtgqeEFtupuyzdDQo7Tqj4GRyNHzOoXjapCEo4rfH3JrXok5VtqucWfRXHPsOI5qoNxMQ9VE+drDIp6woQ==",
+      "version": "1.21.0-dev.20241122-a2ba3cb547",
+      "resolved": "https://registry.npmjs.org/onnxruntime-web/-/onnxruntime-web-1.21.0-dev.20241122-a2ba3cb547.tgz",
+      "integrity": "sha512-Wn4CPIeKj/7nE3QLmRaNfbDTx/E9H1Gpl/jef+KIgkRHKizEizf3eKL0BC2nh5Jm2ChU9uECrZRPwCHhxfQ0AQ==",
       "dependencies": {
         "flatbuffers": "^1.12.0",
         "guid-typescript": "^1.0.9",
         "long": "^5.2.3",
-        "onnxruntime-common": "1.20.0-dev.20241016-2b8fc5529b",
+        "onnxruntime-common": "1.21.0-dev.20241026-05fbb43b34",
         "platform": "^1.3.6",
         "protobufjs": "^7.2.4"
       }
     },
     "node_modules/onnxruntime-web/node_modules/onnxruntime-common": {
-      "version": "1.20.0-dev.20241016-2b8fc5529b",
-      "resolved": "https://registry.npmjs.org/onnxruntime-common/-/onnxruntime-common-1.20.0-dev.20241016-2b8fc5529b.tgz",
-      "integrity": "sha512-KZK8b6zCYGZFjd4ANze0pqBnqnFTS3GIVeclQpa2qseDpXrCQJfkWBixRcrZShNhm3LpFOZ8qJYFC5/qsJK9WQ=="
+      "version": "1.21.0-dev.20241026-05fbb43b34",
+      "resolved": "https://registry.npmjs.org/onnxruntime-common/-/onnxruntime-common-1.21.0-dev.20241026-05fbb43b34.tgz",
+      "integrity": "sha512-yGe5ujfhEPluUjbBe0bgwRapy3Vey0IwfstSeslYiiV0Y3STsqX0naRMde2A2Uajp5zOHP/2H7MD25IEfYI8TQ=="
     },
     "node_modules/open": {
       "version": "8.4.2",
diff --git a/package.json b/package.json
index cb64c59..73e74cc 100644
--- a/package.json
+++ b/package.json
@@ -63,7 +63,7 @@
   "dependencies": {
     "@huggingface/jinja": "^0.3.0",
     "onnxruntime-node": "1.19.2",
-    "onnxruntime-web": "1.20.0-dev.20241016-2b8fc5529b",
+    "onnxruntime-web": "1.21.0-dev.20241122-a2ba3cb547",
     "sharp": "^0.33.5"
   },
   "devDependencies": {
diff --git a/src/models.js b/src/models.js
index b7d2b0e..256592f 100644
--- a/src/models.js
+++ b/src/models.js
@@ -364,6 +364,23 @@ function validateInputs(session, inputs) {
     return checkedInputs;
 }
 
+const getQueryValue = (name) => {
+    const urlParams = new URLSearchParams(window.location.search);
+    return urlParams.get(name);
+};
+
+let runs = 1;
+
+let perf = {
+    warmup: 0,
+    inference: [],
+    throughput: 0
+};
+
+export function getPerf() {
+    return perf;
+}
+
 /**
  * Executes an InferenceSession using the specified inputs.
  * NOTE: `inputs` must contain at least the input names of the model.
@@ -376,11 +393,42 @@ function validateInputs(session, inputs) {
  * @private
  */
 async function sessionRun(session, inputs) {
+    perf = {
+        warmup: 0,
+        inference: [],
+        throughput: 0
+    };
     const checkedInputs = validateInputs(session, inputs);
     try {
         // pass the original ort tensor
         const ortFeed = Object.fromEntries(Object.entries(checkedInputs).map(([k, v]) => [k, v.ort_tensor]));
-        let output = await session.run(ortFeed);
+        let output;
+        let numOfWarmups = 1;
+        // let numOfRuns = 100;
+        console.log(`-- number of test runs --`);
+        if (getQueryValue("run")) {
+            runs = parseInt(getQueryValue("run"));
+        } else {
+            runs = 1;
+        }
+        console.log(runs);
+        let start = performance.now();
+        let loopStart;
+        let current;
+        let arrayInference = [];
+        for(let i=0; i < numOfWarmups + runs; i++) {
+            loopStart = performance.now();
+            output = await session.run(ortFeed);
+            current = performance.now() - loopStart;
+            if(i==0) {
+                perf.warmup = current;
+            } else {
+                arrayInference.push(current);
+            }
+            console.log(`Session run time: ${current}ms`);
+        }
+        perf.inference = arrayInference;
+        perf.throughput = parseFloat((1000.00 / ((performance.now() - start) / (numOfWarmups + runs))).toFixed(2));
         output = replaceTensors(output);
         return output;
     } catch (e) {
-- 
2.25.1

